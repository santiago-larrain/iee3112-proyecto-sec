name: Project Weekly Digest (comment thread)

on:
  schedule:
    # Lunes 11:00 UTC (~07:00 Chile en invierno). Ajusta si quieres otra hora/día.
    - cron: "0 11 * * 1"
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write

env:
  PROJECT_ID:              ${{ vars.PUBLIC_PROJECT_ID }}
  STATUS_FIELD_ID:         ${{ vars.PUBLIC_STATUS_FIELD_ID }}
  PRIORITY_FIELD_ID:       ${{ vars.PUBLIC_PRIORITY_FIELD_ID }}
  SIZE_FIELD_ID:           ${{ vars.PUBLIC_SIZE_FIELD_ID }}
  ESTIMATE_FIELD_ID:       ${{ vars.PUBLIC_ESTIMATE_FIELD_ID }}
  STARTDATE_FIELD_ID:      ${{ vars.PUBLIC_STARTDATE_FIELD_ID }}
  ENDDATE_FIELD_ID:        ${{ vars.PUBLIC_ENDDATE_FIELD_ID }}
  DIGEST_ISSUE_NUMBER:     ${{ vars.DIGEST_ISSUE_NUMBER }}   # opcional

jobs:
  weekly_digest:
    runs-on: ubuntu-latest
    steps:
      - name: Build & post weekly digest
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }} # PAT classic (project+repo)
          script: |
            // ----------------- Utilidades -----------------
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            function isoTodayUTC(){ return new Date().toISOString().slice(0,10); }
            function isoNDaysAgo(n){ return new Date(Date.now()-n*86400000).toISOString().slice(0,10); }
            function isoNDaysAhead(n){ return new Date(Date.now()+n*86400000).toISOString().slice(0,10); }
            const TODAY = isoTodayUTC();
            const WEEK_AGO = isoNDaysAgo(7);
            const NEXT_7   = isoNDaysAhead(7);

            const projectId       = process.env.PROJECT_ID;
            const statusFieldId   = process.env.STATUS_FIELD_ID;
            const priorityFieldId = process.env.PRIORITY_FIELD_ID;
            const sizeFieldId     = process.env.SIZE_FIELD_ID;
            const estimateFieldId = process.env.ESTIMATE_FIELD_ID;
            const startFieldId    = process.env.STARTDATE_FIELD_ID;
            const endFieldId      = process.env.ENDDATE_FIELD_ID;

            // ----------------- Query de items del Project v2 -----------------
            const q = `
              query($project:ID!, $after:String){
                node(id:$project){
                  ... on ProjectV2 {
                    items(first:100, after:$after){
                      nodes{
                        id
                        createdAt
                        content{
                          __typename
                          ... on Issue{
                            number title url state
                            createdAt closedAt
                            repository{ owner{ login } name }
                          }
                        }
                        fieldValues(first:50){
                          nodes{
                            __typename
                            ... on ProjectV2ItemFieldSingleSelectValue{
                              name
                              field{ ... on ProjectV2FieldCommon { id name } }
                            }
                            ... on ProjectV2ItemFieldDateValue{
                              date
                              field{ ... on ProjectV2FieldCommon { id name } }
                            }
                            ... on ProjectV2ItemFieldNumberValue{
                              number
                              field{ ... on ProjectV2FieldCommon { id name } }
                            }
                          }
                        }
                      }
                      pageInfo{ hasNextPage endCursor }
                    }
                  }
                }
              }`;

            let after = null;
            const items = [];
            do{
              const r = await github.graphql(q, { project: projectId, after });
              const page = r.node.items;
              items.push(...page.nodes);
              after = page.pageInfo.hasNextPage ? page.pageInfo.endCursor : null;
            } while(after);

            // ----------------- Parseo y extracción -----------------
            function pickFields(n){
              // Devuelve un objeto con status, priority, size, estimate, start, end
              const out = { status:null, priority:null, size:null, estimate:null, start:null, end:null };
              for (const fv of (n.fieldValues?.nodes||[])) {
                if (fv.__typename === 'ProjectV2ItemFieldSingleSelectValue') {
                  const fid = fv.field?.id;
                  if (fid === statusFieldId)   out.status   = fv.name || null;
                  if (fid === priorityFieldId) out.priority = fv.name || null;
                  if (fid === sizeFieldId)     out.size     = fv.name || null;
                }
                if (fv.__typename === 'ProjectV2ItemFieldNumberValue') {
                  if (fv.field?.id === estimateFieldId) out.estimate = fv.number ?? null;
                }
                if (fv.__typename === 'ProjectV2ItemFieldDateValue') {
                  if (fv.field?.id === startFieldId) out.start = fv.date || null;
                  if (fv.field?.id === endFieldId)   out.end   = fv.date || null;
                }
              }
              return out;
            }

            const rows = [];
            for (const it of items) {
              const c = it.content;
              if (!c || c.__typename !== 'Issue') continue; // omite draft items o PRs
              const f = pickFields(it);
              rows.push({
                id: it.id,
                number: c.number,
                title: c.title,
                url: c.url,
                state: c.state, // OPEN/CLOSED
                createdAt: (c.createdAt||'').slice(0,10),
                closedAt:  c.closedAt ? c.closedAt.slice(0,10) : null,
                repoOwner: c.repository?.owner?.login,
                repoName:  c.repository?.name,
                ...f
              });
            }

            // ----------------- Cálculos para el digest -----------------
            const isInRange = (d, from, to) => d && d >= from && d <= to;

            // Nuevos esta semana (por fecha de creación del Issue)
            const newThisWeek = rows.filter(r => isInRange(r.createdAt, WEEK_AGO, TODAY));

            // Cerrados esta semana (por closedAt)
            const closedThisWeek = rows.filter(r => r.closedAt && isInRange(r.closedAt, WEEK_AGO, TODAY));

            // Atrasados (vencidos): end < hoy y Status != Done
            const overdue = rows.filter(r => r.end && r.end < TODAY && (r.status||'') !== 'Done');

            // Próximas fechas (7 días): start o end ∈ (hoy..hoy+7)
            const upcoming = rows.filter(r =>
              (r.start && r.start >= TODAY && r.start <= NEXT_7) ||
              (r.end   && r.end   >= TODAY && r.end   <= NEXT_7)
            );

            // Totales por Status y Priority
            const byStatus = {};
            const byPriority = {};
            for (const r of rows) {
              const s = r.status || '—';
              const p = r.priority || '—';
              byStatus[s] = (byStatus[s]||0)+1;
              byPriority[p] = (byPriority[p]||0)+1;
            }

            // ----------------- Helpers de markdown -----------------
            function mdRow(r){
              const S = (x)=> x || '—';
              return `| #${r.number} | ${r.title} | ${S(r.status)} | ${S(r.priority)} | ${S(r.start)} | ${S(r.end)} |`;
            }
            function mdList(arr){ return arr.map(r => `- #${r.number} ${r.title}`).join('\n'); }
            function mdTable(arr){
              if (!arr.length) return "_(sin elementos)_";
              const head = "| # | Título | Estado | Prioridad | Inicio | Fin |\n|---:|---|---|---|---|---|";
              return head + "\n" + arr.map(mdRow).join("\n");
            }
            function mdCounts(map){
              const keys = Object.keys(map);
              if (!keys.length) return "_(sin datos)_";
              return keys.sort().map(k=>`- **${k}:** ${map[k]}`).join('\n');
            }

            // Rango legible
            const rangeText = `${WEEK_AGO} – ${TODAY}`;

            // Números para “Panorama rápido”
            const pan_cerradas = closedThisWeek.length;
            const pan_enCurso  = rows.filter(r => ['Ready','In progress','In review'].includes(r.status||'')).length;
            const pan_atraso   = overdue.length;
            const pan_nuevas   = newThisWeek.length;

            const md = [
              `# 🚀 Proyecto-SEC — Resumen semanal (${rangeText})`,
              ``,
              `**Panorama rápido**`,
              `- ✅ Cerradas (Done): **${pan_cerradas}**`,
              `- 🧭 En curso (Ready/In progress/In review): **${pan_enCurso}**`,
              `- 🕗 Atrasadas (vencidas): **${pan_atraso}**`,
              `- 🆕 Nuevas esta semana: **${pan_nuevas}**`,
              ``,
              `---`,
              ``,
              `## 🆕 Nuevos ítems`,
              mdTable(newThisWeek),
              ``,
              `---`,
              ``,
              `## ✅ Cerradas esta semana`,
              (closedThisWeek.length ? mdList(closedThisWeek) : "_(ninguna)_"),
              ``,
              `---`,
              ``,
              `## 🕗 Ítems vencidos (no Done)`,
              mdTable(overdue),
              ``,
              `---`,
              ``,
              `## 🧭 Próximas fechas (7 días)`,
              mdTable(upcoming),
              ``,
              `---`,
              ``,
              `## 📊 Totales por estado`,
              mdCounts(byStatus),
              ``,
              `## 🔢 Totales por prioridad`,
              mdCounts(byPriority),
              ``,
              `_Emitido automáticamente por CI el ${new Date().toISOString().replace('T',' ').replace(/\..+$/,'')} UTC._`
            ].join("\n");

            // ----------------- Encontrar o crear la issue del digest -----------------
            async function ensureDigestIssue(){
              const numFromVar = (process.env.DIGEST_ISSUE_NUMBER||'').trim();
              if (numFromVar) return Number(numFromVar);

              // Buscar issue con título exacto
              let page=1, found=null;
              while(true){
                const { data } = await github.rest.issues.listForRepo({ owner, repo, state:'all', per_page:100, page });
                found = data.find(i => i.title === '📅 Changelog semanal');
                if (found || data.length < 100) break;
                page++;
              }
              if (found) return found.number;

              // Crear si no existe
              const created = await github.rest.issues.create({
                owner, repo,
                title: '📅 Changelog semanal',
                body:  'Este hilo acumula los resúmenes semanales del proyecto.'
              });
              return created.data.number;
            }

            const digestIssueNumber = await ensureDigestIssue();

            // ----------------- Publicar comentario -----------------
            await github.rest.issues.createComment({
              owner, repo,
              issue_number: digestIssueNumber,
              body: md
            });

            core.info(`Digest publicado en #${digestIssueNumber}`);

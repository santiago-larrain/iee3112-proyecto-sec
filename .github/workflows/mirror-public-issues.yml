name: Mirror public issues

on:
  issues:
    types: [opened, edited, labeled, unlabeled, reopened, closed]
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write

env:
  PUBLIC_OWNER: santiago-larrain                  # dueÃ±o del repo PÃšBLICO
  PUBLIC_REPO:  public-iee3112-proyecto-sec       # nombre del repo PÃšBLICO
  MIRROR_LABEL: public                            # etiqueta en la privada que habilita el espejo
  COPY_COMMENTS: true                              # copiar comentarios privado -> pÃºblico

jobs:
  # ----------------- SINCRONIZA ISSUE (tÃ­tulo/cuerpo/estado) -----------------
  mirror_issue:
    if: ${{ github.event_name == 'issues' }}
    runs-on: ubuntu-latest
    steps:
      # Gate: sÃ³lo procede si la issue privada tiene la etiqueta MIRROR_LABEL
      - name: Check label gate (private)
        id: gate
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = (context.payload.issue?.labels || []).map(l => typeof l === 'string' ? l : l.name);
            core.setOutput('allowed', labels.includes(process.env.MIRROR_LABEL) ? 'true' : 'false');

      - name: Stop if not labeled
        if: ${{ steps.gate.outputs.allowed != 'true' }}
        run: echo "Issue without '${{ env.MIRROR_LABEL }}' label. Skipping."

      # Preflight: Â¿el PAT ve el repo pÃºblico y tiene Issues activas?
      - name: Preflight public repo access
        if: ${{ steps.gate.outputs.allowed == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.MIRROR_TOKEN }}
          script: |
            const { data } = await github.rest.repos.get({ owner: process.env.PUBLIC_OWNER, repo: process.env.PUBLIC_REPO });
            if (!data.has_issues) core.setFailed('Issues are disabled in target public repo.');

      # Construir payload y buscar mapping en comentarios PRIVADOS
      - name: Build payload & find mapping (private)
        id: prep
        if: ${{ steps.gate.outputs.allowed == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const src = context.payload.issue;
            const num = src.number;

            function sanitize(text) {
              if (!text) return '';
              let t = text;
              const danger = /(token|secret|password|apikey|PRIVATE KEY|authorization|bearer)/i;
              t = t.split('\n').filter(line => !danger.test(line)).join('\n');
              return t.trim();
            }

            const header = `> ðŸ”— Source: ${context.repo.owner}/${context.repo.repo}#${num}`;
            const bodySafe = sanitize(src.body || '');
            const mirroredBody = `${header}\n\n${bodySafe}\n\n<!-- MIRROR-SOURCE:${context.repo.owner}/${context.repo.repo}#${num} -->`;
            const bodyB64 = Buffer.from(mirroredBody, 'utf8').toString('base64');

            // Buscar mapping (comentario con marcador) en la PRIVADA
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context

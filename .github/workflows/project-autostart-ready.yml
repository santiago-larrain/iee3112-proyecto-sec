name: Project Auto-Start → Ready

on:
  schedule:
    - cron: '0 6 * * *'   # 06:00 UTC diario (ajusta si quieres)
  workflow_dispatch: {}

permissions:
  contents: read

env:
  PROJECT_ID: ${{ vars.PUBLIC_PROJECT_ID }}
  STATUS_FIELD_ID: ${{ vars.PUBLIC_STATUS_FIELD_ID }}
  STARTDATE_FIELD_ID: ${{ vars.PUBLIC_STARTDATE_FIELD_ID }}

jobs:
  autostart:
    runs-on: ubuntu-latest
    steps:
      - name: Move items (Start date <= today && Status=Backlog) → Ready
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}   # PAT clásico con scope 'project' (+ 'repo')
          script: |
            // ---------- util ----------
            const TODAY = new Date().toISOString().slice(0,10); // YYYY-MM-DD UTC

            const projectId = process.env.PROJECT_ID;
            const statusFieldId = process.env.STATUS_FIELD_ID;
            const startDateFieldId = process.env.STARTDATE_FIELD_ID;

            // 1) Obtener opciones del campo Status (name -> id)
            const qStatus = `
              query($fid:ID!){
                node(id:$fid){
                  ... on ProjectV2SingleSelectField {
                    id name
                    options { id name }
                  }
                }
              }`;
            const statusField = await github.graphql(qStatus, { fid: statusFieldId });
            const statusOptions = {};
            for (const opt of statusField.node.options) statusOptions[opt.name] = opt.id;

            // Helper: setear Status por optionId
            const mSetStatus = `
              mutation($project:ID!, $item:ID!, $field:ID!, $opt: String!){
                updateProjectV2ItemFieldValue(input:{
                  projectId:$project, itemId:$item, fieldId:$field,
                  value:{ singleSelectOptionId:$opt }
                }) { projectV2Item { id } }
              }`;

            // 2) Paginamos items del Project
            const qItems = `
              query($project:ID!, $after:String){
                node(id:$project){
                  ... on ProjectV2 {
                    items(first:100, after:$after){
                      nodes{
                        id
                        fieldValues(first:50){
                          nodes{
                            __typename
                            ... on ProjectV2ItemFieldDateValue {
                              date
                              field { ... on ProjectV2FieldCommon { id } }
                            }
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                              field { ... on ProjectV2FieldCommon { id } }
                            }
                          }
                        }
                      }
                      pageInfo{ hasNextPage endCursor }
                    }
                  }
                }
              }`;

            let after = null, scanned = 0, moved = 0;
            do {
              const page = await github.graphql(qItems, { project: projectId, after });
              const items = page.node.items.nodes;

              for (const it of items) {
                scanned++;
                let startDate = null;
                let statusName = null;

                for (const fv of it.fieldValues.nodes) {
                  if (fv.__typename === 'ProjectV2ItemFieldDateValue' && fv.field?.id === startDateFieldId) {
                    startDate = fv.date; // YYYY-MM-DD
                  }
                  if (fv.__typename === 'ProjectV2ItemFieldSingleSelectValue' && fv.field?.id === statusFieldId) {
                    statusName = fv.name; // "Backlog" | "Ready" | ...
                  }
                }

                if (startDate && startDate <= TODAY && statusName === 'Backlog') {
                  const optId = statusOptions['Ready'];
                  if (optId) {
                    await github.graphql(mSetStatus, {
                      project: projectId,
                      item: it.id,
                      field: statusFieldId,
                      opt: optId
                    });
                    moved++;
                  }
                }
              }

              const pi = page.node.items.pageInfo;
              after = pi.hasNextPage ? pi.endCursor : null;
            } while (after);

            core.info(`Escaneados: ${scanned} | Movidos a Ready: ${moved}`);

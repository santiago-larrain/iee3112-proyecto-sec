name: Notify Teams via Flow (compact card)

on:
  issues:
    types: [opened, closed, reopened, edited, labeled, unlabeled, assigned, unassigned]
  issue_comment:
    types: [created]
  workflow_dispatch: {}

permissions:
  contents: read
  issues: read

env:
  PROJECT_ID:        ${{ vars.PUBLIC_PROJECT_ID }}
  STATUS_FIELD_ID:   ${{ vars.PUBLIC_STATUS_FIELD_ID }}
  PRIORITY_FIELD_ID: ${{ vars.PUBLIC_PRIORITY_FIELD_ID }}
  ENDDATE_FIELD_ID:  ${{ vars.PUBLIC_ENDDATE_FIELD_ID }}

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      # 1) Leer campos del Project v2 (status, priority, end date) para esta issue
      - name: Read Project fields (status/priority/end)
        id: fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}
          script: |
            const projectId   = process.env.PROJECT_ID;
            const statusFId   = process.env.STATUS_FIELD_ID;
            const priorityFId = process.env.PRIORITY_FIELD_ID;
            const endFId      = process.env.ENDDATE_FIELD_ID;

            const issueNodeId = context.payload.issue.node_id;

            const q = `
              query($project:ID!, $after:String){
                node(id:$project){
                  ... on ProjectV2 {
                    items(first:100, after:$after){
                      nodes{
                        id
                        content { __typename ... on Issue { id } }
                        fieldValues(first:50){
                          nodes{
                            __typename
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                              field { ... on ProjectV2FieldCommon { id } }
                            }
                            ... on ProjectV2ItemFieldDateValue {
                              date
                              field { ... on ProjectV2FieldCommon { id } }
                            }
                          }
                        }
                      }
                      pageInfo { hasNextPage endCursor }
                    }
                  }
                }
              }`;

            let after = null, found = null;
            do {
              const r = await github.graphql(q, { project: projectId, after });
              const page = r.node.items;
              for (const it of page.nodes) {
                const c = it.content;
                if (c && c.__typename === 'Issue' && c.id === issueNodeId) { found = it; break; }
              }
              after = (found || !page.pageInfo.hasNextPage) ? null : page.pageInfo.endCursor;
            } while(after);

            let status = null, priority = null, endDate = null;
            if (found) {
              for (const fv of (found.fieldValues?.nodes || [])) {
                if (fv.__typename === 'ProjectV2ItemFieldSingleSelectValue') {
                  const fid = fv.field?.id;
                  if (fid === statusFId)   status   = fv.name || null;
                  if (fid === priorityFId) priority = fv.name || null;
                }
                if (fv.__typename === 'ProjectV2ItemFieldDateValue' && fv.field?.id === endFId) {
                  endDate = fv.date || null;
                }
              }
            }
            core.setOutput('status',   status   || '');
            core.setOutput('priority', priority || '');
            core.setOutput('endDate',  endDate  || '');

      # 2) Construir la Adaptive Card compacta y enviarla al Flow de Teams
      - name: Build & Send Adaptive Card
        shell: bash
        env:
          HOOK: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          set -euo pipefail

          # ------------------ Datos del evento ------------------
          EVENT="${{ github.event_name }}"
          ACTION="${{ github.event.action }}"
          NUM="${{ github.event.issue.number }}"
          TITLE_ISSUE="${{ github.event.issue.title }}"
          URL_ISSUE="${{ github.event.issue.html_url }}"

          AUTHOR="${{ github.event.comment.user.login || github.actor }}"
          COMMENT_BODY_RAW='${{ github.event.comment.body || '' }}'
          COMMENT_BODY="$(printf '%s' "$COMMENT_BODY_RAW" | tr '\r\n' ' ' | head -c 300)"

          # Asignados (robusto a null) y recorte
          ASSIGNEES_JSON='${{ toJson(github.event.issue.assignees) }}'
          ASSIGNEES_LIST="$(printf '%s' "$ASSIGNEES_JSON" | jq -r 'if type=="array" then map(.login // .) | join(", ") else "" end')"
          if [ -n "$ASSIGNEES_LIST" ] && [ ${#ASSIGNEES_LIST} -gt 60 ]; then ASSIGNEES_LIST="${ASSIGNEES_LIST:0:60}…"; fi

          # Labels (robusto a null) y recorte
          LABELS_JSON='${{ toJson(github.event.issue.labels) }}'
          LABELS_LIST="$(printf '%s' "$LABELS_JSON" | jq -r 'if type=="array" then map(.name // .) | join(", ") else "" end')"
          if [ -n "$LABELS_LIST" ] && [ ${#LABELS_LIST} -gt 80 ]; then LABELS_LIST="${LABELS_LIST:0:80}…"; fi

          # ------------------ Encabezado + resumen ------------------
          HEADER=""
          SUMMARY=""

          if [ "$EVENT" = "issues" ]; then
            HEADER="🔔 Issue #${NUM} ${ACTION}"

            # Texto para asignaciones
            if [ "$ACTION" = "assigned" ] || [ "$ACTION" = "unassigned" ]; then
              ACTOR="${{ github.actor }}"
              WHO="${{ github.event.assignee.login || '' }}"
              if [ "$ACTION" = "assigned" ]; then
                SUMMARY="$ACTOR asignó${WHO:+ a @$WHO}"
              else
                SUMMARY="$ACTOR quitó${WHO:+ a @$WHO}"
              fi
              [ -n "$ASSIGNEES_LIST" ] && SUMMARY="${SUMMARY} · Asignados: $ASSIGNEES_LIST"
            fi

            # Descripción en opened/edited/reopened (si no hay summary anterior)
            if [ "$ACTION" = "opened" ] || [ "$ACTION" = "edited" ] || [ "$ACTION" = "reopened" ]; then
              if [ -z "$SUMMARY" ]; then
                DESC_RAW='${{ github.event.issue.body || '' }}'
                SUMMARY="$(printf '%s' "$DESC_RAW" | tr '\r\n' ' ' | head -c 500)"
              fi
            fi

            # Etiquetado: muestra qué label cambió
            if [ "$ACTION" = "labeled" ]; then
              LNAME="${{ github.event.label.name || '' }}"
              [ -n "$LNAME" ] && SUMMARY="Etiqueta añadida: $LNAME"
            fi
            if [ "$ACTION" = "unlabeled" ]; then
              LNAME="${{ github.event.label.name || '' }}"
              [ -n "$LNAME" ] && SUMMARY="Etiqueta quitada: $LNAME"
            fi

            # Para otros eventos de issue, si no hay summary, dejar vacío
            [ -z "$SUMMARY" ] && SUMMARY=""

          else
            HEADER="💬 Comentario nuevo en issue #${NUM}"
            SUMMARY="${AUTHOR}: ${COMMENT_BODY}"
          fi

          # ------------------ Campos del Project v2 ------------------
          STATUS="${{ steps.fields.outputs.status }}"
          PRIORITY="${{ steps.fields.outputs.priority }}"
          ENDISO="${{ steps.fields.outputs.endDate }}"

          # Emojis por prioridad
          case "$PRIORITY" in
            P0)       PRI_EMOJI="🔴" ;;
            Hito\ 1)  PRI_EMOJI="🟡" ;;
            Hito\ 2)  PRI_EMOJI="🔵" ;;
            *)        PRI_EMOJI="⚪️" ;;
          esac

          # Emojis por estado
          case "$STATUS" in
            Backlog)                   ST_EMOJI="🔴" ;;
            Ready)                     ST_EMOJI="🔵" ;;
            In\ progress|In\ Progress) ST_EMOJI="🟡" ;;
            In\ review|In\ Review)     ST_EMOJI="🟣" ;;
            Done)                      ST_EMOJI="🟢" ;;
            *)                         ST_EMOJI="⚪️" ;;
          esac

          # Fecha fin humana
          END_HUMAN=""
          if [ -n "$ENDISO" ]; then
            Y=${ENDISO:0:4}; M=${ENDISO:5:2}; D=${ENDISO:8:2}
            END_HUMAN="$D/$M/$Y"
          fi

          # ------------------ Pie compacto ------------------
          FOOT=""
          [ -n "$PRIORITY"  ] && FOOT="${FOOT:+$FOOT   |   }${PRI_EMOJI} ${PRIORITY}"
          [ -n "$STATUS"    ] && FOOT="${FOOT:+$FOOT   |   }${ST_EMOJI} ${STATUS}"
          [ -n "$END_HUMAN" ] && FOOT="${FOOT:+$FOOT   |   }📅 ${END_HUMAN}"
          [ -n "$LABELS_LIST" ] && FOOT="${FOOT:+$FOOT   |   }🏷️ ${LABELS_LIST}"
          [ -n "$ASSIGNEES_LIST" ] && FOOT="${FOOT:+$FOOT   |   }👤 ${ASSIGNEES_LIST}"

          # ------------------ Escapar para JSON ------------------
          esc () { printf '%s' "$1" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g'; }
          HEADER_J="$(esc "$HEADER")"
          TITLE_J="$(esc "$TITLE_ISSUE")"
          URL_J="$(esc "$URL_ISSUE")"
          SUMMARY_J="$(esc "$SUMMARY")"
          FOOT_J="$(esc "$FOOT")"

          # ------------------ Construir y enviar tarjeta ------------------
          cat > payload.json <<JSON
          {
            "type": "message",
            "attachments": [
              {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                  "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                  "type": "AdaptiveCard",
                  "version": "1.5",
                  "body": [
                    { "type": "TextBlock", "text": "$HEADER_J", "size": "Small", "weight": "Bolder", "isSubtle": true, "wrap": true },
                    { "type": "TextBlock", "text": "[$TITLE_J]($URL_J)", "size": "Medium", "weight": "Bolder", "wrap": true },
                    { "type": "TextBlock", "text": "$SUMMARY_J", "wrap": true, "maxLines": 3, "spacing": "Small" },
                    { "type": "TextBlock", "text": "$FOOT_J", "isSubtle": true, "spacing": "Small", "wrap": true }
                  ],
                  "actions": [
                    { "type": "Action.OpenUrl", "title": "Ver en GitHub", "url": "$URL_J" }
                  ]
                }
              }
            ]
          }
          JSON

          curl -sS -X POST "$HOOK" -H "Content-Type: application/json" --data-binary @payload.json
